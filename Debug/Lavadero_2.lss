
Lavadero_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00800200  000005c6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000552  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000014  00800200  00800200  000005c6  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005c6  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000005f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000634  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000127d  00000000  00000000  0000072c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000e30  00000000  00000000  000019a9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000076a  00000000  00000000  000027d9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000002c4  00000000  00000000  00002f44  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000663  00000000  00000000  00003208  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000004a9  00000000  00000000  0000386b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000c8  00000000  00000000  00003d14  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 b7 01 	jmp	0x36e	; 0x36e <__vector_1>
   8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
   c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  10:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  14:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  18:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  20:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  24:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  28:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  2c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  30:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  34:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  38:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  3c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  40:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  44:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_17>
  48:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  4c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  50:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  54:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  58:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  5c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  60:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  64:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  68:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  6c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  70:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  74:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  78:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  7c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  80:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_32>
  84:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  88:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  8c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  90:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  94:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  98:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  9c:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  a8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  ac:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  b8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  bc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  c8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  cc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d4:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  d8:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  dc:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>
  e0:	0c 94 84 00 	jmp	0x108	; 0x108 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61

000000f0 <__do_clear_bss>:
  f0:	22 e0       	ldi	r18, 0x02	; 2
  f2:	a0 e0       	ldi	r26, 0x00	; 0
  f4:	b2 e0       	ldi	r27, 0x02	; 2
  f6:	01 c0       	rjmp	.+2      	; 0xfa <.do_clear_bss_start>

000000f8 <.do_clear_bss_loop>:
  f8:	1d 92       	st	X+, r1

000000fa <.do_clear_bss_start>:
  fa:	a4 31       	cpi	r26, 0x14	; 20
  fc:	b2 07       	cpc	r27, r18
  fe:	e1 f7       	brne	.-8      	; 0xf8 <.do_clear_bss_loop>
 100:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <main>
 104:	0c 94 a7 02 	jmp	0x54e	; 0x54e <_exit>

00000108 <__bad_interrupt>:
 108:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010c <getBit>:
}

int setCallbackSec( void (*fptr)() ) {
	functionPointerSec = fptr;
return 0;
}
 10c:	86 23       	and	r24, r22
 10e:	08 95       	ret

00000110 <setupTimers>:
 110:	f8 94       	cli
 112:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f0080>
 116:	8d e0       	ldi	r24, 0x0D	; 13
 118:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f0081>
 11c:	82 e0       	ldi	r24, 0x02	; 2
 11e:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7f006f>
 122:	22 e1       	ldi	r18, 0x12	; 18
 124:	3a e7       	ldi	r19, 0x7A	; 122
 126:	30 93 89 00 	sts	0x0089, r19	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f0089>
 12a:	20 93 88 00 	sts	0x0088, r18	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f0088>
 12e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7f0090>
 132:	99 e0       	ldi	r25, 0x09	; 9
 134:	90 93 91 00 	sts	0x0091, r25	; 0x800091 <__TEXT_REGION_LENGTH__+0x7f0091>
 138:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7f0071>
 13c:	80 e4       	ldi	r24, 0x40	; 64
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7f0099>
 144:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7f0098>
 148:	78 94       	sei
 14a:	80 e0       	ldi	r24, 0x00	; 0
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	08 95       	ret

00000150 <waitsec>:
 150:	cf 92       	push	r12
 152:	df 92       	push	r13
 154:	ef 92       	push	r14
 156:	ff 92       	push	r15
 158:	0f 93       	push	r16
 15a:	1f 93       	push	r17
 15c:	6b 01       	movw	r12, r22
 15e:	7c 01       	movw	r14, r24
 160:	00 91 04 02 	lds	r16, 0x0204	; 0x800204 <s>
 164:	10 91 05 02 	lds	r17, 0x0205	; 0x800205 <s+0x1>
 168:	20 91 06 02 	lds	r18, 0x0206	; 0x800206 <s+0x2>
 16c:	30 91 07 02 	lds	r19, 0x0207	; 0x800207 <s+0x3>
 170:	40 91 04 02 	lds	r20, 0x0204	; 0x800204 <s>
 174:	50 91 05 02 	lds	r21, 0x0205	; 0x800205 <s+0x1>
 178:	60 91 06 02 	lds	r22, 0x0206	; 0x800206 <s+0x2>
 17c:	70 91 07 02 	lds	r23, 0x0207	; 0x800207 <s+0x3>
 180:	d9 01       	movw	r26, r18
 182:	c8 01       	movw	r24, r16
 184:	8c 0d       	add	r24, r12
 186:	9d 1d       	adc	r25, r13
 188:	ae 1d       	adc	r26, r14
 18a:	bf 1d       	adc	r27, r15
 18c:	48 17       	cp	r20, r24
 18e:	59 07       	cpc	r21, r25
 190:	6a 07       	cpc	r22, r26
 192:	7b 07       	cpc	r23, r27
 194:	68 f3       	brcs	.-38     	; 0x170 <waitsec+0x20>
 196:	80 e0       	ldi	r24, 0x00	; 0
 198:	90 e0       	ldi	r25, 0x00	; 0
 19a:	1f 91       	pop	r17
 19c:	0f 91       	pop	r16
 19e:	ff 90       	pop	r15
 1a0:	ef 90       	pop	r14
 1a2:	df 90       	pop	r13
 1a4:	cf 90       	pop	r12
 1a6:	08 95       	ret

000001a8 <getms>:
 1a8:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 1ac:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 1b0:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 1b4:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 1b8:	08 95       	ret

000001ba <setCallbackMsec>:

int setCallbackMsec( void (*fptr)() ) {
	functionPointerMsec = fptr;
 1ba:	90 93 0f 02 	sts	0x020F, r25	; 0x80020f <functionPointerMsec+0x1>
 1be:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <functionPointerMsec>
return 0;
}
 1c2:	80 e0       	ldi	r24, 0x00	; 0
 1c4:	90 e0       	ldi	r25, 0x00	; 0
 1c6:	08 95       	ret

000001c8 <__vector_17>:

////////////////////////////
// Interrupts handlers
ISR(TIMER1_COMPA_vect){
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	2f 93       	push	r18
 1d4:	3f 93       	push	r19
 1d6:	4f 93       	push	r20
 1d8:	5f 93       	push	r21
 1da:	6f 93       	push	r22
 1dc:	7f 93       	push	r23
 1de:	8f 93       	push	r24
 1e0:	9f 93       	push	r25
 1e2:	af 93       	push	r26
 1e4:	bf 93       	push	r27
 1e6:	ef 93       	push	r30
 1e8:	ff 93       	push	r31
	s++;
 1ea:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <s>
 1ee:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <s+0x1>
 1f2:	a0 91 06 02 	lds	r26, 0x0206	; 0x800206 <s+0x2>
 1f6:	b0 91 07 02 	lds	r27, 0x0207	; 0x800207 <s+0x3>
 1fa:	01 96       	adiw	r24, 0x01	; 1
 1fc:	a1 1d       	adc	r26, r1
 1fe:	b1 1d       	adc	r27, r1
 200:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <s>
 204:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <s+0x1>
 208:	a0 93 06 02 	sts	0x0206, r26	; 0x800206 <s+0x2>
 20c:	b0 93 07 02 	sts	0x0207, r27	; 0x800207 <s+0x3>
	if (functionPointerSec != NULL) functionPointerSec();
 210:	e0 91 0c 02 	lds	r30, 0x020C	; 0x80020c <functionPointerSec>
 214:	f0 91 0d 02 	lds	r31, 0x020D	; 0x80020d <functionPointerSec+0x1>
 218:	30 97       	sbiw	r30, 0x00	; 0
 21a:	09 f0       	breq	.+2      	; 0x21e <__vector_17+0x56>
 21c:	09 95       	icall
}
 21e:	ff 91       	pop	r31
 220:	ef 91       	pop	r30
 222:	bf 91       	pop	r27
 224:	af 91       	pop	r26
 226:	9f 91       	pop	r25
 228:	8f 91       	pop	r24
 22a:	7f 91       	pop	r23
 22c:	6f 91       	pop	r22
 22e:	5f 91       	pop	r21
 230:	4f 91       	pop	r20
 232:	3f 91       	pop	r19
 234:	2f 91       	pop	r18
 236:	0f 90       	pop	r0
 238:	0f be       	out	0x3f, r0	; 63
 23a:	0f 90       	pop	r0
 23c:	1f 90       	pop	r1
 23e:	18 95       	reti

00000240 <__vector_32>:

ISR(TIMER3_COMPA_vect){
 240:	1f 92       	push	r1
 242:	0f 92       	push	r0
 244:	0f b6       	in	r0, 0x3f	; 63
 246:	0f 92       	push	r0
 248:	11 24       	eor	r1, r1
 24a:	2f 93       	push	r18
 24c:	3f 93       	push	r19
 24e:	4f 93       	push	r20
 250:	5f 93       	push	r21
 252:	6f 93       	push	r22
 254:	7f 93       	push	r23
 256:	8f 93       	push	r24
 258:	9f 93       	push	r25
 25a:	af 93       	push	r26
 25c:	bf 93       	push	r27
 25e:	ef 93       	push	r30
 260:	ff 93       	push	r31
	ms++;
 262:	80 91 00 02 	lds	r24, 0x0200	; 0x800200 <__DATA_REGION_ORIGIN__>
 266:	90 91 01 02 	lds	r25, 0x0201	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 26a:	a0 91 02 02 	lds	r26, 0x0202	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 26e:	b0 91 03 02 	lds	r27, 0x0203	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
 272:	01 96       	adiw	r24, 0x01	; 1
 274:	a1 1d       	adc	r26, r1
 276:	b1 1d       	adc	r27, r1
 278:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
 27c:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
 280:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
 284:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
	if (functionPointerMsec != NULL) functionPointerMsec();
 288:	e0 91 0e 02 	lds	r30, 0x020E	; 0x80020e <functionPointerMsec>
 28c:	f0 91 0f 02 	lds	r31, 0x020F	; 0x80020f <functionPointerMsec+0x1>
 290:	30 97       	sbiw	r30, 0x00	; 0
 292:	09 f0       	breq	.+2      	; 0x296 <__vector_32+0x56>
 294:	09 95       	icall
 296:	ff 91       	pop	r31
 298:	ef 91       	pop	r30
 29a:	bf 91       	pop	r27
 29c:	af 91       	pop	r26
 29e:	9f 91       	pop	r25
 2a0:	8f 91       	pop	r24
 2a2:	7f 91       	pop	r23
 2a4:	6f 91       	pop	r22
 2a6:	5f 91       	pop	r21
 2a8:	4f 91       	pop	r20
 2aa:	3f 91       	pop	r19
 2ac:	2f 91       	pop	r18
 2ae:	0f 90       	pop	r0
 2b0:	0f be       	out	0x3f, r0	; 63
 2b2:	0f 90       	pop	r0
 2b4:	1f 90       	pop	r1
 2b6:	18 95       	reti

000002b8 <main>:
#include "General.h"
uint32_t x = 0;
int main(void)
{
    /* Main de pruebas */
	setupTimers();
 2b8:	0e 94 88 00 	call	0x110	; 0x110 <setupTimers>

	setOne(M1_di_PORT,PORT_M1_di);
 2bc:	cb e0       	ldi	r28, 0x0B	; 11
 2be:	d1 e0       	ldi	r29, 0x01	; 1
 2c0:	88 81       	ld	r24, Y
 2c2:	81 60       	ori	r24, 0x01	; 1
 2c4:	88 83       	st	Y, r24
	x=getBit(M1_di_PORT,PORT_M1_di);
 2c6:	88 81       	ld	r24, Y
 2c8:	61 e0       	ldi	r22, 0x01	; 1
 2ca:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	a0 e0       	ldi	r26, 0x00	; 0
 2d2:	b0 e0       	ldi	r27, 0x00	; 0
 2d4:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <x>
 2d8:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <x+0x1>
 2dc:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <x+0x2>
 2e0:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <x+0x3>
	setZero(M1_di_PORT,PORT_M1_di);
 2e4:	88 81       	ld	r24, Y
 2e6:	8e 7f       	andi	r24, 0xFE	; 254
 2e8:	88 83       	st	Y, r24
	x=getBit(M1_di_PORT,PORT_M1_di);
 2ea:	88 81       	ld	r24, Y
 2ec:	61 e0       	ldi	r22, 0x01	; 1
 2ee:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 2f2:	90 e0       	ldi	r25, 0x00	; 0
 2f4:	a0 e0       	ldi	r26, 0x00	; 0
 2f6:	b0 e0       	ldi	r27, 0x00	; 0
 2f8:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <x>
 2fc:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <x+0x1>
 300:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <x+0x2>
 304:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <x+0x3>
	
	setupLED_1();
 308:	0e 94 a7 01 	call	0x34e	; 0x34e <setupLED_1>
	setupBelt();
 30c:	0e 94 ad 01 	call	0x35a	; 0x35a <setupBelt>
	setCallbackMsec(LED_1);
 310:	8b e2       	ldi	r24, 0x2B	; 43
 312:	92 e0       	ldi	r25, 0x02	; 2
 314:	0e 94 dd 00 	call	0x1ba	; 0x1ba <setCallbackMsec>
	startBelt();
 318:	0e 94 ec 01 	call	0x3d8	; 0x3d8 <startBelt>
	
	waitsec(2);
 31c:	62 e0       	ldi	r22, 0x02	; 2
 31e:	70 e0       	ldi	r23, 0x00	; 0
 320:	80 e0       	ldi	r24, 0x00	; 0
 322:	90 e0       	ldi	r25, 0x00	; 0
 324:	0e 94 a8 00 	call	0x150	; 0x150 <waitsec>
	
	stopBelt();
 328:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <stopBelt>

    while (1) 
    {
		x=getBit(M1_di_PORT,PORT_M1_di);
 32c:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7f010b>
 330:	61 e0       	ldi	r22, 0x01	; 1
 332:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 336:	90 e0       	ldi	r25, 0x00	; 0
 338:	a0 e0       	ldi	r26, 0x00	; 0
 33a:	b0 e0       	ldi	r27, 0x00	; 0
 33c:	80 93 08 02 	sts	0x0208, r24	; 0x800208 <x>
 340:	90 93 09 02 	sts	0x0209, r25	; 0x800209 <x+0x1>
 344:	a0 93 0a 02 	sts	0x020A, r26	; 0x80020a <x+0x2>
 348:	b0 93 0b 02 	sts	0x020B, r27	; 0x80020b <x+0x3>
 34c:	ef cf       	rjmp	.-34     	; 0x32c <main+0x74>

0000034e <setupLED_1>:
	functionPointerStop = fptr;
return 0;
}

void setupLED_1(){
	setOne(LD_DDR, DDR_L1); //Set the led 1 pin as an output
 34e:	ea e0       	ldi	r30, 0x0A	; 10
 350:	f1 e0       	ldi	r31, 0x01	; 1
 352:	80 81       	ld	r24, Z
 354:	82 60       	ori	r24, 0x02	; 2
 356:	80 83       	st	Z, r24
 358:	08 95       	ret

0000035a <setupBelt>:
}

void setupBelt(){
	setOne(M6_di_DDR, DDR_M6_di); //Set the M6 direction pin as an output
 35a:	84 b1       	in	r24, 0x04	; 4
 35c:	80 62       	ori	r24, 0x20	; 32
 35e:	84 b9       	out	0x04, r24	; 4
	setOne(M6_en_DDR, DDR_M6_en); //Set the M6 en pin as an output
 360:	84 b1       	in	r24, 0x04	; 4
 362:	80 68       	ori	r24, 0x80	; 128
 364:	84 b9       	out	0x04, r24	; 4
	setOne(M6_di_PORT, PORT_M6_di); //Set M6 rotation direction to right
 366:	85 b1       	in	r24, 0x05	; 5
 368:	80 62       	ori	r24, 0x20	; 32
 36a:	85 b9       	out	0x05, r24	; 5
 36c:	08 95       	ret

0000036e <__vector_1>:
}

ISR(INT0_vect){
 36e:	1f 92       	push	r1
 370:	0f 92       	push	r0
 372:	0f b6       	in	r0, 0x3f	; 63
 374:	0f 92       	push	r0
 376:	11 24       	eor	r1, r1
 378:	2f 93       	push	r18
 37a:	3f 93       	push	r19
 37c:	4f 93       	push	r20
 37e:	5f 93       	push	r21
 380:	6f 93       	push	r22
 382:	7f 93       	push	r23
 384:	8f 93       	push	r24
 386:	9f 93       	push	r25
 388:	af 93       	push	r26
 38a:	bf 93       	push	r27
 38c:	ef 93       	push	r30
 38e:	ff 93       	push	r31
	if(functionPointerStop != NULL) functionPointerStop();
 390:	e0 91 12 02 	lds	r30, 0x0212	; 0x800212 <functionPointerStop>
 394:	f0 91 13 02 	lds	r31, 0x0213	; 0x800213 <functionPointerStop+0x1>
 398:	30 97       	sbiw	r30, 0x00	; 0
 39a:	09 f0       	breq	.+2      	; 0x39e <__vector_1+0x30>
 39c:	09 95       	icall
}
 39e:	ff 91       	pop	r31
 3a0:	ef 91       	pop	r30
 3a2:	bf 91       	pop	r27
 3a4:	af 91       	pop	r26
 3a6:	9f 91       	pop	r25
 3a8:	8f 91       	pop	r24
 3aa:	7f 91       	pop	r23
 3ac:	6f 91       	pop	r22
 3ae:	5f 91       	pop	r21
 3b0:	4f 91       	pop	r20
 3b2:	3f 91       	pop	r19
 3b4:	2f 91       	pop	r18
 3b6:	0f 90       	pop	r0
 3b8:	0f be       	out	0x3f, r0	; 63
 3ba:	0f 90       	pop	r0
 3bc:	1f 90       	pop	r1
 3be:	18 95       	reti

000003c0 <turnOnL1>:


void turnOnL1(){
	setOne(LD_PORT, PORT_L1);
 3c0:	eb e0       	ldi	r30, 0x0B	; 11
 3c2:	f1 e0       	ldi	r31, 0x01	; 1
 3c4:	80 81       	ld	r24, Z
 3c6:	82 60       	ori	r24, 0x02	; 2
 3c8:	80 83       	st	Z, r24
 3ca:	08 95       	ret

000003cc <turnOffL1>:
}

void turnOffL1(){
	setZero(LD_PORT, PORT_L1);
 3cc:	eb e0       	ldi	r30, 0x0B	; 11
 3ce:	f1 e0       	ldi	r31, 0x01	; 1
 3d0:	80 81       	ld	r24, Z
 3d2:	8d 7f       	andi	r24, 0xFD	; 253
 3d4:	80 83       	st	Z, r24
 3d6:	08 95       	ret

000003d8 <startBelt>:
}

void startBelt(){
	setOne(M6_en_PORT, PORT_M6_en);
 3d8:	85 b1       	in	r24, 0x05	; 5
 3da:	80 68       	ori	r24, 0x80	; 128
 3dc:	85 b9       	out	0x05, r24	; 5
 3de:	08 95       	ret

000003e0 <stopBelt>:
}

void stopBelt(){
	setZero(M6_en_PORT, PORT_M6_en);
 3e0:	85 b1       	in	r24, 0x05	; 5
 3e2:	8f 77       	andi	r24, 0x7F	; 127
 3e4:	85 b9       	out	0x05, r24	; 5
 3e6:	08 95       	ret

000003e8 <readState>:
			turnOffL1();
		}
	}
}

void readState(){
 3e8:	0f 93       	push	r16
 3ea:	1f 93       	push	r17
 3ec:	cf 93       	push	r28
	uint8_t acc = 0; 
	acc += getBit(M1_en_PIN, PIN_M1_en);
 3ee:	06 e0       	ldi	r16, 0x06	; 6
 3f0:	11 e0       	ldi	r17, 0x01	; 1
 3f2:	f8 01       	movw	r30, r16
 3f4:	80 81       	ld	r24, Z
 3f6:	64 e0       	ldi	r22, 0x04	; 4
 3f8:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 3fc:	c8 2f       	mov	r28, r24
	acc += getBit(M2_en_PIN, PIN_M2_en);
 3fe:	f8 01       	movw	r30, r16
 400:	80 81       	ld	r24, Z
 402:	60 e4       	ldi	r22, 0x40	; 64
 404:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 408:	c8 0f       	add	r28, r24
	acc += getBit(M3_en_PIN, PIN_M3_en);
 40a:	83 b1       	in	r24, 0x03	; 3
 40c:	68 e0       	ldi	r22, 0x08	; 8
 40e:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 412:	c8 0f       	add	r28, r24
	acc += getBit(M4_en_PIN, PIN_M4_en);
 414:	f8 01       	movw	r30, r16
 416:	80 81       	ld	r24, Z
 418:	60 e8       	ldi	r22, 0x80	; 128
 41a:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 41e:	c8 0f       	add	r28, r24
	acc += getBit(M5_en_PIN, PIN_M5_en);
 420:	f8 01       	movw	r30, r16
 422:	80 81       	ld	r24, Z
 424:	68 e0       	ldi	r22, 0x08	; 8
 426:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 42a:	c8 0f       	add	r28, r24
	acc += getBit(M6_en_PIN, PIN_M6_en);
 42c:	83 b1       	in	r24, 0x03	; 3
 42e:	60 e8       	ldi	r22, 0x80	; 128
 430:	0e 94 86 00 	call	0x10c	; 0x10c <getBit>
 434:	8c 0f       	add	r24, r28
	if(acc>0){
 436:	39 f0       	breq	.+14     	; 0x446 <__LOCK_REGION_LENGTH__+0x46>
		cycle_state = CYCLE_WORKING;
 438:	81 e0       	ldi	r24, 0x01	; 1
 43a:	90 e0       	ldi	r25, 0x00	; 0
 43c:	90 93 11 02 	sts	0x0211, r25	; 0x800211 <cycle_state+0x1>
 440:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <cycle_state>
 444:	04 c0       	rjmp	.+8      	; 0x44e <__LOCK_REGION_LENGTH__+0x4e>
	}
	else{
		cycle_state = CYCLE_STOPPED; 
 446:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <cycle_state+0x1>
 44a:	10 92 10 02 	sts	0x0210, r1	; 0x800210 <cycle_state>
	}
}
 44e:	cf 91       	pop	r28
 450:	1f 91       	pop	r17
 452:	0f 91       	pop	r16
 454:	08 95       	ret

00000456 <LED_1>:
void stopBelt(){
	setZero(M6_en_PORT, PORT_M6_en);
}

void LED_1(){
	readState(); 
 456:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <readState>
	if (cycle_state==CYCLE_WORKING){
 45a:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <cycle_state>
 45e:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <cycle_state+0x1>
 462:	01 97       	sbiw	r24, 0x01	; 1
 464:	81 f5       	brne	.+96     	; 0x4c6 <LED_1+0x70>
		if((getms()/500)%2==0 && getms()%500==0){ //If ms is a pair multiple of 500
 466:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 46a:	64 ef       	ldi	r22, 0xF4	; 244
 46c:	71 e0       	ldi	r23, 0x01	; 1
 46e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 472:	60 fd       	sbrc	r22, 0
 474:	0b c0       	rjmp	.+22     	; 0x48c <LED_1+0x36>
 476:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 47a:	64 ef       	ldi	r22, 0xF4	; 244
 47c:	71 e0       	ldi	r23, 0x01	; 1
 47e:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 482:	89 2b       	or	r24, r25
 484:	19 f4       	brne	.+6      	; 0x48c <LED_1+0x36>
			turnOnL1();
 486:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <turnOnL1>
 48a:	1d c0       	rjmp	.+58     	; 0x4c6 <LED_1+0x70>
		}
		else if((getms()/500)%2==1 && getms()%500==0){ //If ms is an impair multiple of 500
 48c:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 490:	64 ef       	ldi	r22, 0xF4	; 244
 492:	71 e0       	ldi	r23, 0x01	; 1
 494:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 498:	61 70       	andi	r22, 0x01	; 1
 49a:	70 78       	andi	r23, 0x80	; 128
 49c:	77 23       	and	r23, r23
 49e:	34 f4       	brge	.+12     	; 0x4ac <LED_1+0x56>
 4a0:	61 50       	subi	r22, 0x01	; 1
 4a2:	71 09       	sbc	r23, r1
 4a4:	6e 6f       	ori	r22, 0xFE	; 254
 4a6:	7f 6f       	ori	r23, 0xFF	; 255
 4a8:	6f 5f       	subi	r22, 0xFF	; 255
 4aa:	7f 4f       	sbci	r23, 0xFF	; 255
 4ac:	61 30       	cpi	r22, 0x01	; 1
 4ae:	71 05       	cpc	r23, r1
 4b0:	51 f4       	brne	.+20     	; 0x4c6 <LED_1+0x70>
 4b2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 4b6:	64 ef       	ldi	r22, 0xF4	; 244
 4b8:	71 e0       	ldi	r23, 0x01	; 1
 4ba:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 4be:	89 2b       	or	r24, r25
 4c0:	11 f4       	brne	.+4      	; 0x4c6 <LED_1+0x70>
			turnOffL1();
 4c2:	0e 94 e6 01 	call	0x3cc	; 0x3cc <turnOffL1>
		}
	}
	if (cycle_state==CYCLE_STOPPED){
 4c6:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <cycle_state>
 4ca:	90 91 11 02 	lds	r25, 0x0211	; 0x800211 <cycle_state+0x1>
 4ce:	89 2b       	or	r24, r25
 4d0:	a9 f4       	brne	.+42     	; 0x4fc <LED_1+0xa6>
		if((getms()%10000)==0){
 4d2:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 4d6:	60 e1       	ldi	r22, 0x10	; 16
 4d8:	77 e2       	ldi	r23, 0x27	; 39
 4da:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 4de:	89 2b       	or	r24, r25
 4e0:	19 f4       	brne	.+6      	; 0x4e8 <LED_1+0x92>
			turnOnL1();
 4e2:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <turnOnL1>
 4e6:	08 95       	ret
		}
		else if((getms()%10500)==0){
 4e8:	0e 94 d4 00 	call	0x1a8	; 0x1a8 <getms>
 4ec:	64 e0       	ldi	r22, 0x04	; 4
 4ee:	79 e2       	ldi	r23, 0x29	; 41
 4f0:	0e 94 7f 02 	call	0x4fe	; 0x4fe <__divmodhi4>
 4f4:	89 2b       	or	r24, r25
 4f6:	11 f4       	brne	.+4      	; 0x4fc <LED_1+0xa6>
			turnOffL1();
 4f8:	0e 94 e6 01 	call	0x3cc	; 0x3cc <turnOffL1>
 4fc:	08 95       	ret

000004fe <__divmodhi4>:
 4fe:	97 fb       	bst	r25, 7
 500:	07 2e       	mov	r0, r23
 502:	16 f4       	brtc	.+4      	; 0x508 <__divmodhi4+0xa>
 504:	00 94       	com	r0
 506:	07 d0       	rcall	.+14     	; 0x516 <__divmodhi4_neg1>
 508:	77 fd       	sbrc	r23, 7
 50a:	09 d0       	rcall	.+18     	; 0x51e <__divmodhi4_neg2>
 50c:	0e 94 93 02 	call	0x526	; 0x526 <__udivmodhi4>
 510:	07 fc       	sbrc	r0, 7
 512:	05 d0       	rcall	.+10     	; 0x51e <__divmodhi4_neg2>
 514:	3e f4       	brtc	.+14     	; 0x524 <__divmodhi4_exit>

00000516 <__divmodhi4_neg1>:
 516:	90 95       	com	r25
 518:	81 95       	neg	r24
 51a:	9f 4f       	sbci	r25, 0xFF	; 255
 51c:	08 95       	ret

0000051e <__divmodhi4_neg2>:
 51e:	70 95       	com	r23
 520:	61 95       	neg	r22
 522:	7f 4f       	sbci	r23, 0xFF	; 255

00000524 <__divmodhi4_exit>:
 524:	08 95       	ret

00000526 <__udivmodhi4>:
 526:	aa 1b       	sub	r26, r26
 528:	bb 1b       	sub	r27, r27
 52a:	51 e1       	ldi	r21, 0x11	; 17
 52c:	07 c0       	rjmp	.+14     	; 0x53c <__udivmodhi4_ep>

0000052e <__udivmodhi4_loop>:
 52e:	aa 1f       	adc	r26, r26
 530:	bb 1f       	adc	r27, r27
 532:	a6 17       	cp	r26, r22
 534:	b7 07       	cpc	r27, r23
 536:	10 f0       	brcs	.+4      	; 0x53c <__udivmodhi4_ep>
 538:	a6 1b       	sub	r26, r22
 53a:	b7 0b       	sbc	r27, r23

0000053c <__udivmodhi4_ep>:
 53c:	88 1f       	adc	r24, r24
 53e:	99 1f       	adc	r25, r25
 540:	5a 95       	dec	r21
 542:	a9 f7       	brne	.-22     	; 0x52e <__udivmodhi4_loop>
 544:	80 95       	com	r24
 546:	90 95       	com	r25
 548:	bc 01       	movw	r22, r24
 54a:	cd 01       	movw	r24, r26
 54c:	08 95       	ret

0000054e <_exit>:
 54e:	f8 94       	cli

00000550 <__stop_program>:
 550:	ff cf       	rjmp	.-2      	; 0x550 <__stop_program>
